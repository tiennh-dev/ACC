// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using iChiba.ACC.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using tomware.Microwf.Engine;
using Object = iChiba.ACC.Model.Object;

namespace iChiba.ACC.DbContext
{
    public partial class ACCDBContext : EngineDbContext
    {
        public ACCDBContext(DbContextOptions<ACCDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Bank_Account> Bank_Account { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Object> Object { get; set; }
        public virtual DbSet<ObjectGroup> ObjectGroup { get; set; }
        public virtual DbSet<Statistic> Statistic { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("ACCOUNT");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(500);
            });

            modelBuilder.Entity<Bank_Account>(entity =>
            {
                entity.ToTable("BANK_ACCOUNT");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.BankAccount)
                    .IsRequired()
                    .HasColumnName("BankAccount")
                    .HasMaxLength(255);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.Owner)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("CURRENCY");

                entity.Property(e => e.AccoountCash).HasMaxLength(255);

                entity.Property(e => e.AccoountDeposits).HasMaxLength(255);

                entity.Property(e => e.CurrencyId).HasMaxLength(255);

                entity.Property(e => e.CurrencyName).HasMaxLength(255);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("DEPARTMENT");

                entity.Property(e => e.DepartId)
                    .IsRequired()
                    .HasColumnName("DepartID")
                    .HasMaxLength(255);

                entity.Property(e => e.DepartName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(500);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("EMPLOYEE");

                entity.Property(e => e.Account).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Bank).HasMaxLength(255);

                entity.Property(e => e.DateOfIssue).HasColumnType("datetime");

                entity.Property(e => e.Dependent).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployId)
                    .HasColumnName("EmployID")
                    .HasMaxLength(255);

                entity.Property(e => e.EmployName).HasMaxLength(255);

                entity.Property(e => e.Identity).HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.PlaceOfIssue).HasMaxLength(255);

                entity.Property(e => e.TaxCode).HasMaxLength(255);

                entity.Property(e => e.Title).HasMaxLength(255);

                entity.HasOne(d => d.DepartmentNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.Department)
                    .HasConstraintName("FK_EMPLOYEE_DEPARTMENT");
            });

            modelBuilder.Entity<Object>(entity =>
            {
                entity.ToTable("OBJECT");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.BankBranch).HasMaxLength(255);

                entity.Property(e => e.BankName).HasMaxLength(255);

                entity.Property(e => e.BankNumber).HasMaxLength(255);

                entity.Property(e => e.BankProvince).HasMaxLength(255);

                entity.Property(e => e.Commune).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.District).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.IdIssuedBy).HasMaxLength(255);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.Identify).HasMaxLength(255);

                entity.Property(e => e.ObjectId)
                    .HasColumnName("ObjectID")
                    .HasMaxLength(255);

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.Province).HasMaxLength(255);

                entity.Property(e => e.RepEmail).HasMaxLength(255);

                entity.Property(e => e.RepMobile).HasMaxLength(255);

                entity.Property(e => e.RepPhone).HasMaxLength(255);

                entity.Property(e => e.RepTitle).HasMaxLength(255);

                entity.Property(e => e.Represent).HasMaxLength(255);

                entity.Property(e => e.TaxCode).HasMaxLength(255);

                entity.Property(e => e.Website).HasMaxLength(255);

                entity.HasOne(d => d.ObjectGroupNavigation)
                    .WithMany(p => p.Object)
                    .HasForeignKey(d => d.ObjectGroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OBJECT_OBJECT_GROUP");
            });

            modelBuilder.Entity<ObjectGroup>(entity =>
            {
                entity.ToTable("OBJECT_GROUP");

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasMaxLength(500);
            });

            modelBuilder.Entity<Statistic>(entity =>
            {
                entity.ToTable("STATISTIC");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.StatisticId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.StatisticName)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}